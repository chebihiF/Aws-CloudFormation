Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              services:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "S3:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"

  EmptyS3BycketLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Runtime: "python3.7"
      Timeout: 1000
      Code:
        ZipFile: |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          import json
          import boto3
          from botocore.vendored import request

          def handler(event, context):
            try:
              bucket = event['ResourceProperties']['BucketName']
              if event['RequestType'] == 'Delete' :
                s3 = boto3.resource('s3')
                bucket = s3.Bucket(bucket)
                for obj in bucket.objects.filter():
                  s3.Object(bucket.name, obj.key).delete()

              sendResponseCfn(event, context, "SUCCESS")
            except Exception as e:
              print(e)
              sendResponseCfn(event, context, "FAILED")

          def sendResponseCfn(event, context, responseStatus):
            response_body = {'Status': responseStatus,
                             'Reason': 'Log stream name :'+context.log_stream_name,
                             'PhysicalResourceId': event[StackId],
                             'RequestId': event['RequestId'],
                             'LogicalResourceId': event['LogicalResourceId'],
                             'Data': json.loads("{}")}
            requests.put(event['ResponseURL'], data= json.dumps(response_body))

Outputs:
  StackSSHSecurityGroup:
    Description: The ARN of the lambda function
    Value: !GetAtt EmptyS3BycketLambda.Arn
    Export:
      Name: EmptyS3BycketLambda